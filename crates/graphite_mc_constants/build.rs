use std::{env, fs::File, io::Write, path::Path};

#[path = "build/block.rs"]
mod block;
#[path = "build/entities.rs"]
mod entities;
#[path = "build/item.rs"]
mod item;
// #[path = "build/placement.rs"]
// mod placement;

fn main() {
    let out_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let tags_path = Path::new(&out_dir).join("src/tags/");
    std::fs::create_dir_all(tags_path).unwrap();

    let (placement_method_returns, aliases, block_name_to_state) = block::write_block_states().unwrap();
    item::write_items(block_name_to_state).unwrap();
    entities::write_entities().unwrap();
    // placement::write_placement(placement_method_returns, aliases).unwrap();

    // Write mod.rs for tags
    // let mut tags_mod_rs = file_src("tags/mod.rs");
    // tags_mod_rs.write_all(b"pub mod block;").unwrap();

    // Write lib.rs
    let mut lib_rs = file_src("lib.rs");
    lib_rs.write_all(
b"#![allow(dead_code)]
#![allow(unused_imports)]

pub mod block;
pub mod block_parameter;
pub mod entity;
pub mod item;").unwrap();

    println!("cargo:rerun-if-changed=./data");
    println!("cargo:rerun-if-changed=build.rs");
}

fn file_src(filename: &'static str) -> File {
    let out_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("src/").join(filename);
    let mut f = File::create(&dest_path).unwrap();
    write_header(&mut f);
    f
}

fn file_out(filename: &'static str) -> File {
    let out_dir = env::var("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join(filename);
    let mut f = File::create(&dest_path).unwrap();
    write_header(&mut f);
    f
}

fn write_header(f: &mut File) {
    f.write_all(b"// DO NOT MANUALLY EDIT THIS FILE\n").unwrap();
    f.write_all(b"// This file has been autogenerated by minecraft_constants/build.rs\n")
        .unwrap();
    f.write_all(
        b"// Data is provided courtesy of `https://github.com/Minestom/MinestomDataGenerator`\n\n",
    )
    .unwrap();
}
